--- linux-2.4.20/net/sunrpc/svcsock.c.diff	2003-05-29 10:40:50.000000000 -0400
+++ linux-2.4.20/net/sunrpc/svcsock.c	2003-05-29 11:47:01.000000000 -0400
@@ -314,8 +314,9 @@
 	mm_segment_t	oldfs;
 	struct svc_sock	*svsk = rqstp->rq_sock;
 	struct socket	*sock = svsk->sk_sock;
+	struct svc_serv	*serv = svsk->sk_server;
 	struct msghdr	msg;
-	int		i, buflen, len;
+	int		i, buflen, len = 0;
 
 	for (i = buflen = 0; i < nr; i++)
 		buflen += iov[i].iov_len;
@@ -335,12 +336,21 @@
 	 */
 	msg.msg_flags	= 0;
 
-	oldfs = get_fs(); set_fs(KERNEL_DS);
-	len = sock_sendmsg(sock, &msg, buflen);
-	set_fs(oldfs);
+	/* 
+	 * Make sure there is a socket before sending
+	 */
+	spin_lock_bh(&serv->sv_lock);
+	if (test_bit(SK_DEAD, &svsk->sk_flags))
+		len = -ENOTCONN;
+	spin_unlock_bh(&serv->sv_lock);
 
-	dprintk("svc: socket %p sendto([%p %Zu... ], %d, %d) = %d\n",
+	if (len == 0) {
+		oldfs = get_fs(); set_fs(KERNEL_DS);
+		len = sock_sendmsg(sock, &msg, buflen);
+		set_fs(oldfs);
+		dprintk("svc: socket %p sendto([%p %Zu... ], %d, %d) = %d\n",
 			rqstp->rq_sock, iov[0].iov_base, iov[0].iov_len, nr, buflen, len);
+	}
 
 	return len;
 }
@@ -1267,11 +1277,19 @@
 	serv = svsk->sk_server;
 	sk = svsk->sk_sk;
 
+	/*
+	 * This only needs to be done once!
+	 */
+	spin_lock_bh(&serv->sv_lock);
+	if (test_bit(SK_DEAD, &svsk->sk_flags)) {
+		spin_unlock_bh(&serv->sv_lock);
+		return;
+	}
+
 	sk->state_change = svsk->sk_ostate;
 	sk->data_ready = svsk->sk_odata;
 	sk->write_space = svsk->sk_owspace;
 
-	spin_lock_bh(&serv->sv_lock);
 
 	list_del(&svsk->sk_list);
 	if (test_bit(SK_TEMP, &svsk->sk_flags))
