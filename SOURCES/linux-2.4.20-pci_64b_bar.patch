--- linux-2.4.20/drivers/pci/pci.c.64bitpci	2003-04-08 15:34:21.000000000 -0400
+++ linux-2.4.20/drivers/pci/pci.c	2003-04-08 16:56:34.000000000 -0400
@@ -1094,13 +1094,18 @@ static void pci_read_bases(struct pci_de
 			next++;
 #if BITS_PER_LONG == 64
 			res->start |= ((unsigned long) l) << 32;
-			res->end = res->start + sz;
-			pci_write_config_dword(dev, reg+4, ~0);
-			pci_read_config_dword(dev, reg+4, &sz);
-			pci_write_config_dword(dev, reg+4, l);
-			if (~sz)
+			if (sz == 0xffffffff) {
+				/* upper word must set the size */
+				pci_write_config_dword(dev, reg+4, ~0);
+				pci_read_config_dword(dev, reg+4, &sz);
+				pci_write_config_dword(dev, reg+4, l);
+				sz = pci_size(sz, sz, 0xffffffff);
 				res->end = res->start + 0xffffffff +
-						(((unsigned long) ~sz) << 32);
+					(((unsigned long) sz) << 32);
+			} else {
+				/* lower word sets the bar size */
+				res->end = res->start + sz;
+			}
 #else
 			if (l) {
 				printk(KERN_ERR "PCI: Unable to handle 64-bit address for device %s\n", dev->slot_name);
@@ -1216,7 +1216,7 @@ void __devinit pci_read_bridge_bases(str
 		limit |= (io_limit_hi << 16);
 	}
 
-	if (base && base <= limit) {
+	if (base <= limit) {
 		res->flags = (io_base_lo & PCI_IO_RANGE_TYPE_MASK) | IORESOURCE_IO;
 		res->start = base;
 		res->end = limit + 0xfff;
@@ -1239,8 +1245,8 @@ void __devinit pci_read_bridge_bases(str
 		pci_read_config_dword(dev, PCI_PREF_BASE_UPPER32, &mem_base_hi);
 		pci_read_config_dword(dev, PCI_PREF_LIMIT_UPPER32, &mem_limit_hi);
 #if BITS_PER_LONG == 64
-		base |= ((long) mem_base_hi) << 32;
-		limit |= ((long) mem_limit_hi) << 32;
+		base |= ((unsigned long) mem_base_hi) << 32;
+		limit |= ((unsigned long) mem_limit_hi) << 32;
 #else
 		if (mem_base_hi || mem_limit_hi) {
 			printk(KERN_ERR "PCI: Unable to handle 64-bit address space for %s\n", child->name);
