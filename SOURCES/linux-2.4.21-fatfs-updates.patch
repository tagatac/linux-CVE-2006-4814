diff -urNp linux-6110/fs/fat/dir.c linux-6120/fs/fat/dir.c
--- linux-6110/fs/fat/dir.c
+++ linux-6120/fs/fat/dir.c
@@ -198,7 +198,8 @@ int fat_search_long(struct inode *inode,
 	int uni_xlate = MSDOS_SB(sb)->options.unicode_xlate;
 	int utf8 = MSDOS_SB(sb)->options.utf8;
 	unsigned short opt_shortname = MSDOS_SB(sb)->options.shortname;
-	int ino, chl, i, j, last_u, res = 0;
+	int chl, i, j, last_u, res = 0;
+	u64 ino;
 	loff_t cpos = 0;
 
 	while(1) {
@@ -368,7 +369,8 @@ static int fat_readdirx(struct inode *in
 	int utf8 = MSDOS_SB(sb)->options.utf8;
 	int nocase = MSDOS_SB(sb)->options.nocase;
 	unsigned short opt_shortname = MSDOS_SB(sb)->options.shortname;
-	int ino, inum, chi, chl, i, i2, j, last, last_u, dotoffset = 0;
+	int inum, chi, chl, i, i2, j, last, last_u, dotoffset = 0;
+	u64 ino;
 	loff_t cpos;
 
 	cpos = filp->f_pos;
@@ -693,7 +695,8 @@ int fat_dir_empty(struct inode *dir)
 	loff_t pos;
 	struct buffer_head *bh;
 	struct msdos_dir_entry *de;
-	int ino,result = 0;
+	int result = 0;
+	u64 ino;
 
 	pos = 0;
 	bh = NULL;
@@ -717,7 +720,7 @@ int fat_dir_empty(struct inode *dir)
 /* This assumes that size of cluster is above the 32*slots */
 
 int fat_add_entries(struct inode *dir,int slots, struct buffer_head **bh,
-		  struct msdos_dir_entry **de, int *ino)
+		  struct msdos_dir_entry **de, u64 *ino)
 {
 	struct super_block *sb = dir->i_sb;
 	loff_t offset, curr;
diff -urNp linux-6110/fs/fat/inode.c linux-6120/fs/fat/inode.c
--- linux-6110/fs/fat/inode.c
+++ linux-6120/fs/fat/inode.c
@@ -83,14 +83,14 @@ void fat_hash_init(void)
 	}
 }
 
-static inline unsigned long fat_hash(struct super_block *sb, int i_pos)
+static inline unsigned long fat_hash(struct super_block *sb, u64 i_pos)
 {
 	unsigned long tmp = (unsigned long)i_pos | (unsigned long) sb;
 	tmp = tmp + (tmp >> FAT_HASH_BITS) + (tmp >> FAT_HASH_BITS * 2);
 	return tmp & FAT_HASH_MASK;
 }
 
-void fat_attach(struct inode *inode, int i_pos)
+void fat_attach(struct inode *inode, u64 i_pos)
 {
 	spin_lock(&fat_inode_lock);
 	MSDOS_I(inode)->i_location = i_pos;
@@ -108,7 +108,7 @@ void fat_detach(struct inode *inode)
 	spin_unlock(&fat_inode_lock);
 }
 
-struct inode *fat_iget(struct super_block *sb, int i_pos)
+struct inode *fat_iget(struct super_block *sb, u64 i_pos)
 {
 	struct list_head *p = fat_inode_hashtable + fat_hash(sb, i_pos);
 	struct list_head *walk;
@@ -133,7 +133,7 @@ struct inode *fat_iget(struct super_bloc
 static void fat_fill_inode(struct inode *inode, struct msdos_dir_entry *de);
 
 struct inode *fat_build_inode(struct super_block *sb,
-				struct msdos_dir_entry *de, int ino, int *res)
+				struct msdos_dir_entry *de, u64 ino, int *res)
 {
 	struct inode *inode;
 	*res = 0;
@@ -454,6 +454,7 @@ struct dentry *fat_fh_to_dentry(struct s
 		 * Will fail if you truncate and then re-write
 		 */
 
+		/* XXX: more than 128Gb and it breaks */
 		inode = fat_iget(sb, fh[2]);
 		if (inode && MSDOS_I(inode)->i_logstart != fh[3]) {
 			iput(inode);
diff -urNp linux-6110/fs/fat/misc.c linux-6120/fs/fat/misc.c
--- linux-6110/fs/fat/misc.c
+++ linux-6120/fs/fat/misc.c
@@ -316,7 +316,7 @@ void fat_date_unix2dos(int unix_date,uns
  */
 
 int fat__get_entry(struct inode *dir, loff_t *pos,struct buffer_head **bh,
-    struct msdos_dir_entry **de, int *ino)
+    struct msdos_dir_entry **de, u64 *ino)
 {
 	struct super_block *sb = dir->i_sb;
 	struct msdos_sb_info *sbi = MSDOS_SB(sb);
@@ -343,7 +343,7 @@ int fat__get_entry(struct inode *dir, lo
 
 		offset &= sb->s_blocksize - 1;
 		*de = (struct msdos_dir_entry *) ((*bh)->b_data + offset);
-		*ino = (sector << sbi->dir_per_block_bits) + (offset >> MSDOS_DIR_BITS);
+		*ino = ((u64)sector << sbi->dir_per_block_bits) + (offset >> MSDOS_DIR_BITS);
 
 		return 0;
 	}
@@ -401,7 +401,7 @@ int fat__get_entry(struct inode *dir, lo
     }
 
 static int raw_scan_sector(struct super_block *sb,int sector,const char *name,
-    int *number,int *ino,struct buffer_head **res_bh,
+    int *number,u64 *ino,struct buffer_head **res_bh,
     struct msdos_dir_entry **res_de)
 {
 	struct buffer_head *bh;
@@ -424,7 +424,7 @@ static int raw_scan_sector(struct super_
 		}
 		if (done) {
 			if (ino)
-				*ino = sector * MSDOS_SB(sb)->dir_per_block + entry;
+				*ino = (u64)sector * MSDOS_SB(sb)->dir_per_block + entry;
 			start = CF_LE_W(data[entry].start);
 			if (MSDOS_SB(sb)->fat_bits == 32) {
 				start |= (CF_LE_W(data[entry].starthi) << 16);
@@ -448,7 +448,7 @@ static int raw_scan_sector(struct super_
  * requested entry is found or the end of the directory is reached.
  */
 
-static int raw_scan_root(struct super_block *sb,const char *name,int *number,int *ino,
+static int raw_scan_root(struct super_block *sb,const char *name,int *number,u64 *ino,
     struct buffer_head **res_bh,struct msdos_dir_entry **res_de)
 {
 	int count,cluster;
@@ -470,7 +470,7 @@ static int raw_scan_root(struct super_bl
  */
 
 static int raw_scan_nonroot(struct super_block *sb,int start,const char *name,
-    int *number,int *ino,struct buffer_head **res_bh,struct msdos_dir_entry
+    int *number,u64 *ino,struct buffer_head **res_bh,struct msdos_dir_entry
     **res_de)
 {
 	int count,cluster;
@@ -506,7 +506,7 @@ static int raw_scan_nonroot(struct super
  */
 
 static int raw_scan(struct super_block *sb, int start, const char *name,
-    int *number, int *ino, struct buffer_head **res_bh,
+    int *number, u64 *ino, struct buffer_head **res_bh,
     struct msdos_dir_entry **res_de)
 {
 	if (start)
@@ -543,7 +543,7 @@ int fat_subdirs(struct inode *dir)
  */
 
 int fat_scan(struct inode *dir,const char *name,struct buffer_head **res_bh,
-    struct msdos_dir_entry **res_de,int *ino)
+    struct msdos_dir_entry **res_de,u64 *ino)
 {
 	int res;
 
diff -urNp linux-6110/fs/msdos/namei.c linux-6120/fs/msdos/namei.c
--- linux-6110/fs/msdos/namei.c
+++ linux-6120/fs/msdos/namei.c
@@ -128,7 +128,7 @@ static int msdos_format_name(const char 
 
 /***** Locates a directory entry.  Uses unformatted name. */
 static int msdos_find(struct inode *dir,const char *name,int len,
-    struct buffer_head **bh,struct msdos_dir_entry **de,int *ino)
+    struct buffer_head **bh,struct msdos_dir_entry **de,u64 *ino)
 {
 	int res;
 	char dotsOK;
@@ -214,7 +214,8 @@ struct dentry *msdos_lookup(struct inode
 	struct inode *inode = NULL;
 	struct msdos_dir_entry *de;
 	struct buffer_head *bh = NULL;
-	int ino,res;
+	int res;
+	u64 ino;
 	
 	PRINTK (("msdos_lookup\n"));
 
@@ -243,7 +244,7 @@ out:
 static int msdos_add_entry(struct inode *dir, const char *name,
 			   struct buffer_head **bh,
 			   struct msdos_dir_entry **de,
-			   int *ino,
+			   u64 *ino,
 			   int is_dir, int is_hid)
 {
 	struct super_block *sb = dir->i_sb;
@@ -279,7 +280,8 @@ int msdos_create(struct inode *dir,struc
 	struct buffer_head *bh;
 	struct msdos_dir_entry *de;
 	struct inode *inode;
-	int ino,res,is_hid;
+	int res,is_hid;
+	u64 ino;
 	char msdos_name[MSDOS_NAME];
 
 	res = msdos_format_name(dentry->d_name.name,dentry->d_name.len,
@@ -311,7 +313,8 @@ int msdos_rmdir(struct inode *dir, struc
 {
 	struct super_block *sb = dir->i_sb;
 	struct inode *inode = dentry->d_inode;
-	int res,ino;
+	int res;
+	u64 ino;
 	struct buffer_head *bh;
 	struct msdos_dir_entry *de;
 
@@ -352,7 +355,7 @@ int msdos_mkdir(struct inode *dir,struct
 	struct inode *inode;
 	int res,is_hid;
 	char msdos_name[MSDOS_NAME];
-	int ino;
+	u64 ino;
 
 	res = msdos_format_name(dentry->d_name.name,dentry->d_name.len,
 				msdos_name, &MSDOS_SB(sb)->options);
@@ -412,7 +415,8 @@ int msdos_unlink( struct inode *dir, str
 {
 	struct super_block *sb = dir->i_sb;
 	struct inode *inode = dentry->d_inode;
-	int res,ino;
+	int res;
+	u64 ino;
 	struct buffer_head *bh;
 	struct msdos_dir_entry *de;
 
@@ -439,13 +443,13 @@ static int do_msdos_rename(struct inode 
     struct dentry *old_dentry,
     struct inode *new_dir,char *new_name, struct dentry *new_dentry,
     struct buffer_head *old_bh,
-    struct msdos_dir_entry *old_de, int old_ino, int is_hid)
+    struct msdos_dir_entry *old_de, int is_hid)
 {
 	struct super_block *sb = old_dir->i_sb;
 	struct buffer_head *new_bh=NULL,*dotdot_bh=NULL;
 	struct msdos_dir_entry *new_de,*dotdot_de;
 	struct inode *old_inode,*new_inode;
-	int new_ino,dotdot_ino;
+	u64 new_ino,dotdot_ino;
 	int error;
 	int is_dir;
 
@@ -542,7 +546,8 @@ int msdos_rename(struct inode *old_dir,s
 	struct super_block *sb = old_dir->i_sb;
 	struct buffer_head *old_bh;
 	struct msdos_dir_entry *old_de;
-	int old_ino, error;
+	int error;
+	u64 old_ino;
 	int is_hid,old_hid; /* if new file and old file are hidden */
 	char old_msdos_name[MSDOS_NAME], new_msdos_name[MSDOS_NAME];
 
@@ -565,7 +570,7 @@ int msdos_rename(struct inode *old_dir,s
 
 	error = do_msdos_rename(old_dir, old_msdos_name, old_dentry,
 				new_dir, new_msdos_name, new_dentry,
-				old_bh, old_de, (ino_t)old_ino, is_hid);
+				old_bh, old_de, is_hid);
 	fat_brelse(sb, old_bh);
 
 rename_done:
diff -urNp linux-6110/fs/vfat/namei.c linux-6120/fs/vfat/namei.c
--- linux-6110/fs/vfat/namei.c
+++ linux-6120/fs/vfat/namei.c
@@ -408,7 +408,8 @@ static int vfat_find_form(struct inode *
 {
 	struct msdos_dir_entry *de;
 	struct buffer_head *bh = NULL;
-	int ino,res;
+	int res;
+	u64 ino;
 
 	res=fat_scan(dir,name,&bh,&de,&ino);
 	fat_brelse(dir->i_sb, bh);
@@ -891,7 +892,7 @@ static int vfat_add_entry(struct inode *
 	int res, len;
 	struct msdos_dir_entry *dummy_de;
 	struct buffer_head *dummy_bh;
-	int dummy_ino;
+	u64 dummy_ino;
 	loff_t dummy;
 
 	dir_slots = (struct msdos_dir_slot *)
@@ -1052,7 +1053,8 @@ static void vfat_remove_entry(struct ino
 {
 	struct super_block *sb = dir->i_sb;
 	loff_t offset;
-	int i,ino;
+	int i;
+	u64 ino;
 
 	/* remove the shortname */
 	dir->i_mtime = CURRENT_TIME;
@@ -1170,7 +1172,7 @@ int vfat_rename(struct inode *old_dir,st
 	struct super_block *sb = old_dir->i_sb;
 	struct buffer_head *old_bh,*new_bh,*dotdot_bh;
 	struct msdos_dir_entry *old_de,*new_de,*dotdot_de;
-	int dotdot_ino;
+	u64 dotdot_ino;
 	struct inode *old_inode, *new_inode;
 	int res, is_dir;
 	struct vfat_slot_info old_sinfo,sinfo;
diff -urNp linux-6110/include/linux/msdos_fs.h linux-6120/include/linux/msdos_fs.h
--- linux-6110/include/linux/msdos_fs.h
+++ linux-6120/include/linux/msdos_fs.h
@@ -180,7 +180,7 @@ struct vfat_slot_info {
 	int total_slots;	       /* total slots (long and short) */
 	loff_t longname_offset;	       /* dir offset for longname start */
 	loff_t shortname_offset;       /* dir offset for shortname start */
-	int ino;		       /* ino for the file */
+	u64 ino;		       /* ino for the file */
 };
 
 /* Determine whether this FS has kB-aligned data. */
@@ -264,7 +264,7 @@ extern int fat_dir_ioctl(struct inode * 
 			 unsigned int cmd, unsigned long arg);
 extern int fat_dir_empty(struct inode *dir);
 extern int fat_add_entries(struct inode *dir, int slots, struct buffer_head **bh,
-			   struct msdos_dir_entry **de, int *ino);
+			   struct msdos_dir_entry **de, u64 *ino);
 extern int fat_new_dir(struct inode *dir, struct inode *parent, int is_vfat);
 
 /* fat/file.c */
@@ -280,11 +280,11 @@ extern void fat_truncate(struct inode *i
 
 /* fat/inode.c */
 extern void fat_hash_init(void);
-extern void fat_attach(struct inode *inode, int i_pos);
+extern void fat_attach(struct inode *inode, u64 i_pos);
 extern void fat_detach(struct inode *inode);
-extern struct inode *fat_iget(struct super_block *sb, int i_pos);
+extern struct inode *fat_iget(struct super_block *sb, u64 i_pos);
 extern struct inode *fat_build_inode(struct super_block *sb,
-				     struct msdos_dir_entry *de, int ino, int *res);
+				     struct msdos_dir_entry *de, u64 ino, int *res);
 extern void fat_delete_inode(struct inode *inode);
 extern void fat_clear_inode(struct inode *inode);
 extern void fat_put_super(struct super_block *sb);
@@ -307,10 +307,10 @@ extern int date_dos2unix(unsigned short 
 extern void fat_date_unix2dos(int unix_date, unsigned short *time,
 			      unsigned short *date);
 extern int fat__get_entry(struct inode *dir, loff_t *pos, struct buffer_head **bh,
-			  struct msdos_dir_entry **de, int *ino);
+			  struct msdos_dir_entry **de, u64 *ino);
 static __inline__ int fat_get_entry(struct inode *dir, loff_t *pos,
 				    struct buffer_head **bh,
-				    struct msdos_dir_entry **de, int *ino)
+				    struct msdos_dir_entry **de, u64 *ino)
 {
 	/* Fast stuff first */
 	if (*bh && *de &&
@@ -325,7 +325,7 @@ static __inline__ int fat_get_entry(stru
 extern int fat_subdirs(struct inode *dir);
 extern int fat_scan(struct inode *dir, const char *name,
 		    struct buffer_head **res_bh,
-		    struct msdos_dir_entry **res_de, int *ino);
+		    struct msdos_dir_entry **res_de, u64 *ino);
 
 /* msdos/namei.c  - these are for Umsdos */
 extern void msdos_put_super(struct super_block *sb);
diff -urNp linux-6110/include/linux/msdos_fs_i.h linux-6120/include/linux/msdos_fs_i.h
--- linux-6110/include/linux/msdos_fs_i.h
+++ linux-6120/include/linux/msdos_fs_i.h
@@ -11,7 +11,11 @@ struct msdos_inode_info {
 	int i_logstart;	/* logical first cluster */
 	int i_attrs;	/* unused attribute bits */
 	int i_ctime_ms;	/* unused change time in milliseconds */
+#ifdef __GENKSYMS__ /* preserve KMI/ABI ksyms compatibility for mod linkage */
 	int i_location;	/* on-disk position of directory entry or 0 */
+#else
+	u64 i_location;	/* on-disk position of directory entry or 0 */
+#endif /* __GENKSYMS__ */
 	struct inode *i_fat_inode;	/* struct inode of this one */
 	struct list_head i_fat_hash;	/* hash by i_location */
 };
