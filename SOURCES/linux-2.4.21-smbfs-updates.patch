diff -urNp linux-5390/fs/smbfs/dir.c linux-5395/fs/smbfs/dir.c
--- linux-5390/fs/smbfs/dir.c
+++ linux-5395/fs/smbfs/dir.c
@@ -399,6 +399,11 @@ smb_lookup(struct inode *dir, struct den
 	if (dentry->d_name.len > SMB_MAXNAMELEN)
 		goto out;
 
+	/* Do not allow lookup of names with backslashes in them */
+	error = -EINVAL;
+	if (memchr(dentry->d_name.name, '\\', dentry->d_name.len))
+		goto out;
+
 	error = smb_proc_getattr(dentry, &finfo);
 #ifdef SMBFS_PARANOIA
 	if (error && error != -ENOENT)
diff -urNp linux-5390/fs/smbfs/inode.c linux-5395/fs/smbfs/inode.c
--- linux-5390/fs/smbfs/inode.c
+++ linux-5395/fs/smbfs/inode.c
@@ -23,6 +23,7 @@
 #include <linux/smp_lock.h>
 #include <linux/nls.h>
 #include <linux/seq_file.h>
+#include <linux/highuid.h>
 
 #include <linux/smb_fs.h>
 #include <linux/smbno.h>
@@ -478,10 +479,16 @@ smb_read_super(struct super_block *sb, v
 	if (ver == SMB_MOUNT_OLDVERSION) {
 		mnt->version = oldmnt->version;
 
-		/* FIXME: is this enough to convert uid/gid's ? */
-		mnt->mounted_uid = oldmnt->mounted_uid;
-		mnt->uid = oldmnt->uid;
-		mnt->gid = oldmnt->gid;
+#ifndef low2highuid
+#define low2highuid(uid) ((uid) == (__kernel_uid_t)-1 ? (uid_t)-1 : \
+							(uid_t)(uid))
+#endif
+		mnt->uid = low2highuid(oldmnt->uid);
+#ifndef low2highgid
+#define low2highgid(gid) ((gid) == (__kernel_gid_t)-1 ? (gid_t)-1 : \
+							(gid_t)(gid))
+#endif
+		mnt->gid = low2highgid(oldmnt->gid);
 
 		mnt->file_mode = (oldmnt->file_mode & S_IRWXUGO) | S_IFREG;
 		mnt->dir_mode = (oldmnt->dir_mode & S_IRWXUGO) | S_IFDIR;
@@ -490,9 +497,8 @@ smb_read_super(struct super_block *sb, v
 	} else {
 		if (parse_options(mnt, raw_data))
 			goto out_bad_option;
-
-		mnt->mounted_uid = current->uid;
 	}
+	mnt->mounted_uid = current->uid;
 	smb_setcodepage(server, &mnt->codepage);
 
 	/*
diff -urNp linux-5390/fs/smbfs/proc.c linux-5395/fs/smbfs/proc.c
--- linux-5390/fs/smbfs/proc.c
+++ linux-5395/fs/smbfs/proc.c
@@ -1197,9 +1197,11 @@ smb_proc_read(struct inode *inode, off_t
 	data_len = WVAL(buf, 1);
 
 	/* we can NOT simply trust the data_len given by the server ... */
-	if (data_len > server->packet_size - (buf+3 - server->packet)) {
+	if (data_len > count ||
+	    data_len > server->packet_size - (buf+3 - server->packet)) {
 		printk(KERN_ERR "smb_proc_read: invalid data length!! "
-		       "%d > %d - (%p - %p)\n",
+		       "%d > %d || %d > %d - (%p - %p)\n",
+		       data_len, count,
 		       data_len, server->packet_size, buf+3, server->packet);
 		result = -EIO;
 		goto out;
diff -urNp linux-5390/fs/smbfs/sock.c linux-5395/fs/smbfs/sock.c
--- linux-5390/fs/smbfs/sock.c
+++ linux-5395/fs/smbfs/sock.c
@@ -571,7 +571,11 @@ smb_receive_trans2(struct smb_sb_info *s
 					parm_disp, parm_offset, parm_count,
 					data_disp, data_offset, data_count);
 				*parm  = base + parm_offset;
+				if (*parm - inbuf + parm_tot > server->packet_size)
+					goto out_bad_parm;
 				*data  = base + data_offset;
+				if (*data - inbuf + data_tot > server->packet_size)
+					goto out_bad_data;
 				goto success;
 			}
 
@@ -591,6 +595,8 @@ smb_receive_trans2(struct smb_sb_info *s
 			rcv_buf = smb_vmalloc(buf_len);
 			if (!rcv_buf)
 				goto out_no_mem;
+			memset(rcv_buf, 0, buf_len);
+			
 			*parm = rcv_buf;
 			*data = rcv_buf + total_p;
 		} else if (data_tot > total_d || parm_tot > total_p)
@@ -598,8 +604,12 @@ smb_receive_trans2(struct smb_sb_info *s
 
 		if (parm_disp + parm_count > total_p)
 			goto out_bad_parm;
+		if (parm_offset + parm_count > server->packet_size)	
+			goto out_bad_parm;
 		if (data_disp + data_count > total_d)
 			goto out_bad_data;
+		if (data_offset + data_count > server->packet_size)	
+			goto out_bad_data;
 		memcpy(*parm + parm_disp, base + parm_offset, parm_count);
 		memcpy(*data + data_disp, base + data_offset, data_count);
 
@@ -610,8 +620,11 @@ smb_receive_trans2(struct smb_sb_info *s
 		 * Check whether we've received all of the data. Note that
 		 * we use the packet totals -- total lengths might shrink!
 		 */
-		if (data_len >= data_tot && parm_len >= parm_tot)
+		if (data_len >= data_tot && parm_len >= parm_tot) {
+			data_len = data_tot;
+			parm_len = parm_tot;
 			break;
+		}
 	}
 
 	/*
@@ -625,6 +638,9 @@ smb_receive_trans2(struct smb_sb_info *s
 		server->packet = rcv_buf;
 		rcv_buf = inbuf;
 	} else {
+		if (parm_len + data_len > buf_len)
+			goto out_data_grew;
+
 		PARANOIA("copying data, old size=%d, new size=%u\n",
 			 server->packet_size, buf_len);
 		memcpy(inbuf, rcv_buf, parm_len + data_len);
diff -urNp linux-5390/include/linux/smb_mount.h linux-5395/include/linux/smb_mount.h
--- linux-5390/include/linux/smb_mount.h
+++ linux-5395/include/linux/smb_mount.h
@@ -42,11 +42,19 @@ struct smb_mount_data {
 struct smb_mount_data_kernel {
 	int version;
 
+#ifdef __GENKSYMS__ /* preserve KMI/ABI ksyms compatibility for mod linkage */
 	__kernel_uid_t mounted_uid;	/* Who may umount() this filesystem? */
 	__kernel_uid_t uid;
 	__kernel_gid_t gid;
 	__kernel_mode_t file_mode;
 	__kernel_mode_t dir_mode;
+#else
+	uid_t mounted_uid;	/* Who may umount() this filesystem? */
+	uid_t uid;
+	gid_t gid;
+	mode_t file_mode;
+	mode_t dir_mode;
+#endif /* !__GENKSYMS__ */
 
 	u32 flags;
 
