diff -urNp linux-5140/drivers/scsi/scsi.c linux-5150/drivers/scsi/scsi.c
--- linux-5140/drivers/scsi/scsi.c
+++ linux-5150/drivers/scsi/scsi.c
@@ -2475,36 +2475,44 @@ int scsi_unregister_module(int module_ty
 static void scsi_dump_status(int level)
 {
 #ifdef CONFIG_SCSI_LOGGING		/* { */
-	int i;
+	int i, j;
 	struct Scsi_Host *shpnt;
 	Scsi_Cmnd *SCpnt;
 	Scsi_Device *SDpnt;
-	printk(KERN_INFO "Dump of scsi host parameters:\n");
+	request_queue_t *q;
+	unsigned long flags;
+
 	i = 0;
 	for (shpnt = scsi_hostlist; shpnt; shpnt = shpnt->next) {
-		printk(KERN_INFO " %d %d %d : %d %d\n",
+		printk(KERN_INFO "Dump of scsi host parameters:\n");
+		printk(KERN_INFO "(scsi%d) Failed %d Busy %d Active %d\n",
+		       shpnt->host_no,
 		       shpnt->host_failed,
 		       atomic_read(&shpnt->host_busy),
-		       atomic_read(&shpnt->host_active),
+		       atomic_read(&shpnt->host_active));
+		printk(KERN_INFO "(scsi%d) Blocked %d (Timer Active %d) Self Blocked %d\n",
+		       shpnt->host_no,
 		       shpnt->host_blocked,
+		       shpnt->unblock_timer_active,
 		       shpnt->host_self_blocked);
-	}
-
-	printk(KERN_INFO "\n\n");
-	printk(KERN_INFO "Dump of scsi command parameters:\n");
-	for (shpnt = scsi_hostlist; shpnt; shpnt = shpnt->next) {
-		printk(KERN_INFO "h:c:t:l (dev sect nsect cnumsec sg) (ret all flg) (to/cmd to ito) cmd snse result\n");
+		printk(KERN_INFO "Dump of scsi device and command parameters:\n");
 		for (SDpnt = shpnt->host_queue; SDpnt; SDpnt = SDpnt->next) {
+			q = &SDpnt->request_queue;
+			spin_lock_irqsave(q->queue_lock, flags);
+			printk(KERN_INFO "(scsi%d:%d:%d:%d) Busy %d Active %d OnLine %d Blocked %d (Timer Active %d)\n",
+			       shpnt->host_no,
+			       SDpnt->channel,
+			       SDpnt->id,
+			       SDpnt->lun,
+			       atomic_read(&SDpnt->device_busy),
+			       atomic_read(&SDpnt->device_active),
+			       SDpnt->online,
+			       SDpnt->device_blocked,
+			       SDpnt->unblock_timer_active);
+			printk(KERN_INFO "(cnt) ( kdev sect nsect cnsect stat use_sg) (retries allowed flags) (timo/cmd timo int_timo) (cmd[0] sense[2] result)\n");
 			for (SCpnt = SDpnt->device_queue; SCpnt; SCpnt = SCpnt->next) {
-				/*  (0) h:c:t:l (dev sect nsect cnumsec sg) (ret all flg) (to/cmd to ito) cmd snse result %d %x      */
-				printk(KERN_INFO "(%3d) %2d:%1d:%2d:%2d (%6s %4ld %4ld %4ld %4x %1d) (%1d %1d 0x%2x) (%4d %4d %4d) 0x%2.2x 0x%2.2x 0x%8.8x\n",
+				printk(KERN_INFO "(%3d) (%6s %4ld %4ld %4ld %4x %1d) (%1d %1d 0x%2.2x) (%4d %4d %4d) 0x%2.2x 0x%2.2x 0x%8.8x\n",
 				       i++,
-
-				       SCpnt->host->host_no,
-				       SCpnt->channel,
-				       SCpnt->target,
-				       SCpnt->lun,
-
 				       kdevname(SCpnt->request.rq_dev),
 				       SCpnt->request.sector,
 				       SCpnt->request.nr_sectors,
@@ -2524,35 +2532,31 @@ static void scsi_dump_status(int level)
 				       SCpnt->sense_buffer[2],
 				       SCpnt->result);
 			}
-		}
-	}
-
-	for (shpnt = scsi_hostlist; shpnt; shpnt = shpnt->next) {
-		for (SDpnt = shpnt->host_queue; SDpnt; SDpnt = SDpnt->next) {
-			/* Now dump the request lists for each block device */
 			printk(KERN_INFO "Dump of pending block device requests\n");
-			for (i = 0; i < MAX_BLKDEV; i++) {
-				struct list_head * queue_head;
-
-				queue_head = &blk_dev[i].request_queue.queue_head;
-				if (!list_empty(queue_head)) {
-					struct request *req;
-					struct list_head * entry;
-
-					printk(KERN_INFO "%d: ", i);
-					entry = queue_head->next;
-					do {
-						req = blkdev_entry_to_request(entry);
-						printk("(%s %d %ld %ld %ld) ",
-						   kdevname(req->rq_dev),
-						       req->cmd,
-						       req->sector,
-						       req->nr_sectors,
-						req->current_nr_sectors);
-					} while ((entry = entry->next) != queue_head);
-					printk("\n");
-				}
+			printk(KERN_INFO "(kdev r/w sector nsect c_nsect)\n");
+			if (!list_empty(&q->queue_head)) {
+				struct request *req;
+				struct list_head * entry;
+
+				entry = q->queue_head.next;
+				printk(KERN_INFO);
+				j = 0;
+				do {
+					req = blkdev_entry_to_request(entry);
+					printk("(%s %d %ld %ld %ld) ",
+					   kdevname(req->rq_dev),
+					       req->cmd,
+					       req->sector,
+					       req->nr_sectors,
+					       req->current_nr_sectors);
+					if (++j == 3) {
+						printk("\n"KERN_INFO);
+						j = 0;
+					}
+				} while ((entry = entry->next) != &q->queue_head);
+				printk("\n");
 			}
+			spin_unlock_irqrestore(q->queue_lock, flags);
 		}
 	}
 #endif	/* CONFIG_SCSI_LOGGING */ /* } */
