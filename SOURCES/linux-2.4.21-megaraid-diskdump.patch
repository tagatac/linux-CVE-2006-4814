diff -urNp linux-5691/drivers/scsi/megaraid2.c linux-5692/drivers/scsi/megaraid2.c
--- linux-5691/drivers/scsi/megaraid2.c
+++ linux-5692/drivers/scsi/megaraid2.c
@@ -43,6 +43,7 @@
 #include "sd.h"
 #include "scsi.h"
 #include "hosts.h"
+#include "scsi_dump.h"
 
 #include "megaraid2.h"
 
@@ -2833,7 +2834,9 @@ megaraid_reset(Scsi_Cmnd *cmd)
 			cmd->result = (DID_RESET << 16);
 
 			mega_free_scb(adapter, scb);
-			cmd->scsi_done(cmd);
+			if( cmd->scsi_done ) {
+				cmd->scsi_done(cmd);
+			}
 		}
 	}
 
@@ -5589,8 +5592,74 @@ mega_internal_done(Scsi_Cmnd *scmd)
 
 }
 
+#if defined(CONFIG_DISKDUMP) || defined(CONFIG_DISKDUMP_MODULE)
+static int
+megaraid_sanity_check(Scsi_Device *device)
+{
+	adapter_t	*adapter = (adapter_t *)device->host->hostdata;
+
+	if( adapter == NULL ) {
+		return -ENXIO;
+	}
+#ifdef SCSI_HAS_HOST_LOCK
+	if(spin_is_locked(adapter->host_lock)) {
+		return -EBUSY;
+	}
+#endif
+	return 0;
+}
+
+static int
+megaraid_quiesce(Scsi_Device *SDev)
+{
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,5,1)
+	spin_lock_init(&io_request_lock);
+#endif
+	return 0;
+}
+
+static void
+megaraid_poll(Scsi_Device *device)
+{
+	adapter_t	*adapter = (adapter_t *)device->host->hostdata;
+	u32		dword = 0;
+	u8		status;
+	u8		byte;
+
+	if( likely(adapter->flag & BOARD_MEMMAP) ) {
+		/* Check if a valid interrupt is pending */
+		dword = RDOUTDOOR(adapter);
+		if( dword != 0x10001234 ) {
+			/*
+			 * No more pending commands
+			 */
+			return;
+		}
+		megaraid_isr_memmapped(0, adapter, NULL);
+	} else {
+		/* Check if a valid interrupt is pending */
+		byte = irq_state(adapter);
+		if( (byte & VALID_INTR_BYTE) == 0 ) {
+			return;
+		}
+		megaraid_isr_iomapped(0, adapter, NULL);
+	}
+}
+
+static struct scsi_dump_ops megaraid_dump_ops = {
+	.sanity_check	= megaraid_sanity_check,
+	.quiesce	= megaraid_quiesce,
+	.poll		= megaraid_poll,
+	.no_write_cache_enable = 1
+};
+
+static Scsi_Host_Template_dump driver_template_dump = MEGARAID;
+#define driver_template		(driver_template_dump.hostt)
+
+#else
 static Scsi_Host_Template driver_template = MEGARAID;
 
+#endif
 #include "scsi_module.c"
 
 /* vi: set ts=8 sw=8 tw=78: */
diff -urNp linux-5691/drivers/scsi/megaraid2.h linux-5692/drivers/scsi/megaraid2.h
--- linux-5691/drivers/scsi/megaraid2.h
+++ linux-5692/drivers/scsi/megaraid2.h
@@ -3,6 +3,7 @@
 
 #include <linux/version.h>
 #include <linux/spinlock.h>
+#include <linux/diskdumplib.h>
 
 
 #define MEGARAID_VERSION	\
@@ -121,8 +122,17 @@
 #define NVIRT_CHAN		4	/* # of virtual channels to represent
 					   up to 60 logical drives */
 
-#define MEGARAID						\
-{								\
+/******************************** Disk dump ***********************************/
+#if defined(CONFIG_DISKDUMP) || defined(CONFIG_DISKDUMP_MODULE)
+#undef  schedule
+#define schedule		diskdump_schedule
+#undef  __wake_up
+#define __wake_up		diskdump_wake_up
+#undef  sleep_on_timeout
+#define sleep_on_timeout	diskdump_sleep_on_timeout
+#endif
+
+#define _MEGARAID						\
 	.name =				"MegaRAID",		\
 	.proc_name =		 	"megaraid",		\
 	.detect =			megaraid_detect,	\
@@ -144,9 +154,19 @@
 	.eh_bus_reset_handler =		megaraid_reset,		\
 	.eh_host_reset_handler =	megaraid_reset,		\
 	.highmem_io =			1,			\
-	.vary_io =			1			\
-}
+	.vary_io =			1			
 
+#if defined(CONFIG_DISKDUMP) || defined(CONFIG_DISKDUMP_MODULE)
+#define MEGARAID {						\
+	.hostt = {						\
+		_MEGARAID,					\
+		.disk_dump		= 1			\
+	},							\
+	.dump_ops			= &megaraid_dump_ops	\
+}
+#else
+#define MEGARAID { _MEGARAID }
+#endif
 
 
 typedef struct {
