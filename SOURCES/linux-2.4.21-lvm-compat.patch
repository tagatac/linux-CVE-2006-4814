--- linux/arch/x86_64/ia32/ia32_ioctl.c.bak	2003-07-28 15:11:24.000000000 -0400
+++ linux/arch/x86_64/ia32/ia32_ioctl.c	2003-07-28 16:06:14.000000000 -0400
@@ -2392,24 +2392,12 @@
 		return NULL;
 	}
 	if (ptr1) {
-		if (l->lv_allocated_le > 2*PAGE_SIZE/sizeof(pe_t)) { 
-			kfree(l);
-			*errp = -EINVAL;
-			return NULL;
-		}
 		size = l->lv_allocated_le * sizeof(pe_t);
 		l->lv_current_pe = vmalloc(size);
 		if (l->lv_current_pe)
 			err = copy_from_user(l->lv_current_pe, (void *)A(ptr1), size);
 	}
 	if (!err && ptr2) {
-		/* small limit */
-		/* just verify area it? */
-		if (l->lv_remap_end > 256*PAGE_SIZE/sizeof(lv_block_exception_t)) { 
-			put_lv_t(l);
-			*errp = -EINVAL;
-			return NULL;
-		}
 		size = l->lv_remap_end * sizeof(lv_block_exception_t);
 		l->lv_block_exception = lbe = vmalloc(size);
 		if (l->lv_block_exception) {
--- linux/arch/ppc64/kernel/ioctl32.c.bak	2003-07-28 15:10:34.000000000 -0400
+++ linux/arch/ppc64/kernel/ioctl32.c	2003-07-28 16:05:56.000000000 -0400
@@ -2408,24 +2408,12 @@
 		return NULL;
 	}
 	if (ptr1) {
-		if (l->lv_allocated_le > 2*PAGE_SIZE/sizeof(pe_t)) { 
-			kfree(l);
-			*errp = -EINVAL;
-			return NULL;
-		}
 		size = l->lv_allocated_le * sizeof(pe_t);
 		l->lv_current_pe = vmalloc(size);
 		if (l->lv_current_pe)
 			err = copy_from_user(l->lv_current_pe, (void *)A(ptr1), size);
 	}
 	if (!err && ptr2) {
-		/* small limit */
-		/* just verify area it? */
-		if (l->lv_remap_end > 256*PAGE_SIZE/sizeof(lv_block_exception_t)) { 
-			put_lv_t(l);
-			*errp = -EINVAL;
-			return NULL;
-		}
 		size = l->lv_remap_end * sizeof(lv_block_exception_t);
 		l->lv_block_exception = lbe = vmalloc(size);
 		if (l->lv_block_exception) {

