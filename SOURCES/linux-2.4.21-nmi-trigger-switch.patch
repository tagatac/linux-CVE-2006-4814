diff -urNp linux-5177/arch/i386/kernel/nmi.c linux-5178/arch/i386/kernel/nmi.c
--- linux-5177/arch/i386/kernel/nmi.c
+++ linux-5178/arch/i386/kernel/nmi.c
@@ -351,6 +351,8 @@ void touch_nmi_watchdog (void)
 		alert_counter[i] = 0;
 }
 
+extern void die_nmi(struct pt_regs *, const char *msg);
+
 void nmi_watchdog_tick (struct pt_regs * regs)
 {
 
@@ -370,21 +372,8 @@ void nmi_watchdog_tick (struct pt_regs *
 		 * wait a few IRQs (30 seconds) before doing the oops ...
 		 */
 		alert_counter[cpu]++;
-		if (alert_counter[cpu] == 30*nmi_hz) {
-			spin_lock(&nmi_print_lock);
-			/*
-			 * We are in trouble anyway, lets at least try
-			 * to get a message out.
-			 */
-			bust_spinlocks(1);
-			printk("NMI Watchdog detected LOCKUP on CPU%d, eip %08lx, registers:\n", cpu, regs->eip);
-			show_registers(regs);
-			printk("console shuts up ...\n");
-			console_silent();
-			spin_unlock(&nmi_print_lock);
-			bust_spinlocks(0);
-			do_exit(SIGSEGV);
-		}
+		if (alert_counter[cpu] == 30*nmi_hz)
+			die_nmi(regs, "NMI Watchdog detected LOCKUP");
 	} else {
 		last_irq_sums[cpu] = sum;
 		alert_counter[cpu] = 0;
diff -urNp linux-5177/arch/i386/kernel/traps.c linux-5178/arch/i386/kernel/traps.c
--- linux-5177/arch/i386/kernel/traps.c
+++ linux-5178/arch/i386/kernel/traps.c
@@ -346,6 +346,8 @@ void die(const char * str, struct pt_reg
 	printk("%s: %04lx\n", str, err & 0xffff);
 	show_registers(regs);
 	try_crashdump(regs);
+	if (panic_on_oops)
+		panic("Fatal exception");
 	bust_spinlocks(0);
 	die_owner = -1;
 	spin_unlock_irq(&die_lock);
@@ -569,6 +571,30 @@ static void unknown_nmi_error(unsigned c
 	printk("Do you have a strange power saving mode enabled?\n");
 }
 
+int unknown_nmi_panic = 0;
+int mem_nmi_panic = 0;
+
+static spinlock_t nmi_print_lock = SPIN_LOCK_UNLOCKED;
+
+void die_nmi(struct pt_regs *regs, const char *msg)
+{
+	spin_lock(&nmi_print_lock);
+	/*
+	 * We are in trouble anyway, lets at least try
+	 * to get a message out.
+	 */
+	bust_spinlocks(1);
+	printk("%s on CPU%d, eip %08lx, registers:\n",
+		msg, smp_processor_id(), regs->eip);
+	show_registers(regs);
+	try_crashdump(regs);
+	printk("console shuts up ...\n");
+	console_silent();
+	spin_unlock(&nmi_print_lock);
+	bust_spinlocks(0);
+	do_exit(SIGSEGV);
+}
+
 static void default_do_nmi(struct pt_regs * regs)
 {
 	unsigned char reason = inb(0x61);
@@ -584,11 +610,22 @@ static void default_do_nmi(struct pt_reg
 			return;
 		}
 #endif
+		if (unknown_nmi_panic) {
+			char buf[64];
+			sprintf(buf, "NMI received for unknown reason %02x", reason);
+			die_nmi(regs, buf);
+		}
 		unknown_nmi_error(reason, regs);
 		return;
 	}
-	if (reason & 0x80)
+	if (reason & 0x80) {
+		if (mem_nmi_panic) {
+			char buf[64];
+			sprintf(buf, "NMI received for possible memory parity error %02x", reason);
+			die_nmi(regs, buf);
+		}
 		mem_parity_error(reason, regs);
+	}
 	if (reason & 0x40)
 		io_check_error(reason, regs);
 	/*
diff -urNp linux-5177/arch/x86_64/kernel/nmi.c linux-5178/arch/x86_64/kernel/nmi.c
--- linux-5177/arch/x86_64/kernel/nmi.c
+++ linux-5178/arch/x86_64/kernel/nmi.c
@@ -322,7 +322,6 @@ void __pminit setup_apic_nmi_watchdog (v
 	nmi_pm_init();
 }
 
-static spinlock_t nmi_print_lock = SPIN_LOCK_UNLOCKED;
 
 /*
  * the best way to detect whether a CPU has a 'hard lockup' problem
@@ -355,6 +354,8 @@ void touch_nmi_watchdog (void)
 		alert_counter[i] = 0;
 }
 
+extern void die_nmi(struct pt_regs *, const char *msg);
+
 void nmi_watchdog_tick (struct pt_regs * regs, unsigned reason)
 {
 
@@ -384,19 +385,7 @@ void nmi_watchdog_tick (struct pt_regs *
 			} 
 
 
-			spin_lock(&nmi_print_lock);
-			/*
-			 * We are in trouble anyway, lets at least try
-			 * to get a message out.
-			 */
-			bust_spinlocks(1);
-			printk("NMI Watchdog detected LOCKUP on CPU%d, eip %16lx, registers:\n", cpu, regs->rip);
-			show_registers(regs);
-			printk("console shuts up ...\n");
-			console_silent();
-			spin_unlock(&nmi_print_lock);
-			bust_spinlocks(0);
-			do_exit(SIGSEGV);
+			die_nmi(regs, "NMI Watchdog detected LOCKUP");
 		}
 	} else {
 		last_irq_sums[cpu] = sum;
diff -urNp linux-5177/arch/x86_64/kernel/traps.c linux-5178/arch/x86_64/kernel/traps.c
--- linux-5177/arch/x86_64/kernel/traps.c
+++ linux-5178/arch/x86_64/kernel/traps.c
@@ -546,6 +546,29 @@ static void unknown_nmi_error(unsigned c
 	printk("Do you have a strange power saving mode enabled?\n");
 }
 
+int unknown_nmi_panic = 0;
+
+static spinlock_t nmi_print_lock = SPIN_LOCK_UNLOCKED;
+
+void die_nmi(struct pt_regs *regs, const char *msg)
+{
+	spin_lock(&nmi_print_lock);
+	/*
+	 * We are in trouble anyway, lets at least try
+	 * to get a message out.
+	 */
+	bust_spinlocks(1);
+	printk("%s on CPU%d, rip %16lx, registers:\n",
+		msg, safe_smp_processor_id(), regs->rip);
+	show_registers(regs);
+	try_crashdump(regs);
+	printk("console shuts up ...\n");
+	console_silent();
+	spin_unlock(&nmi_print_lock);
+	bust_spinlocks(0);
+	do_exit(SIGSEGV);
+}
+
 static void default_do_nmi(struct pt_regs * regs)
 {
 	unsigned char reason = inb(0x61);
@@ -561,6 +584,13 @@ static void default_do_nmi(struct pt_reg
 			return;
 		}
 #endif
+		if (unknown_nmi_panic) {
+			char buf[64];
+			if (notify_die(DIE_NMI, "nmi", regs, reason, 2, SIGINT) == NOTIFY_BAD)
+				return;
+			sprintf(buf, "NMI received for unknown reason %02x", reason);
+			die_nmi(regs, buf);
+		}
 		unknown_nmi_error(reason, regs);
 		return;
 	}
diff -urNp linux-5177/include/linux/sysctl.h linux-5178/include/linux/sysctl.h
--- linux-5177/include/linux/sysctl.h
+++ linux-5178/include/linux/sysctl.h
@@ -130,6 +130,8 @@ enum
 	KERN_SERCONS_ESC=59,	/* int: ascii code of ser-cons "break" or -1 */
 	KERN_TASK_SIZE=60,	/* int: process VM size */
 	KERN_HONOR_UAC_NOPRINT=61, /* int: allow access to UAC_NOPRINT prctl */
+	KERN_UNKNOWN_NMI_PANIC=63, /* int: unknown nmi panic flag */
+	KERN_MEM_NMI_PANIC=64,  /* int: memory nmi panic flag */
 };
 
 
diff -urNp linux-5177/kernel/panic.c linux-5178/kernel/panic.c
--- linux-5177/kernel/panic.c
+++ linux-5178/kernel/panic.c
@@ -337,6 +337,4 @@ void try_crashdump(struct pt_regs *regs)
 	if (netdump_func)
 		netdump_func(regs);
 	netdump_func = NULL;
-	if (panic_on_oops)
-		panic("Fatal exception");
 }
diff -urNp linux-5177/kernel/sysctl.c linux-5178/kernel/sysctl.c
--- linux-5177/kernel/sysctl.c
+++ linux-5178/kernel/sysctl.c
@@ -58,6 +58,12 @@ extern int core_setuid_ok;
 extern char core_pattern[];
 extern int cad_pid;
 extern int pid_max;
+#if defined(CONFIG_X86) || defined(CONFIG_X86_64)
+extern int unknown_nmi_panic;
+#endif
+#if defined(CONFIG_X86) && !defined(CONFIG_X86_64)
+extern int mem_nmi_panic;
+#endif
 
 int exec_shield = 1;
 #ifdef __x86_64__
@@ -329,6 +335,14 @@ static ctl_table kern_table[] = {
 	{KERN_HONOR_UAC_NOPRINT, "honor_uac_noprint_prctl", &honor_uac_noprint,
 	 sizeof(int), 0644, NULL, &proc_dointvec},
 #endif
+#if defined(CONFIG_X86) || defined(CONFIG_X86_64)
+	{KERN_UNKNOWN_NMI_PANIC, "unknown_nmi_panic", &unknown_nmi_panic,
+	 sizeof(int), 0644, NULL, &proc_dointvec},
+#endif
+#if defined(CONFIG_X86) && !defined(CONFIG_X86_64)
+	{KERN_MEM_NMI_PANIC, "mem_nmi_panic", &mem_nmi_panic,
+	 sizeof(int), 0644, NULL, &proc_dointvec},
+#endif
 	{0}
 };
 
