diff -urNp linux-363/arch/ppc64/kernel/head.S linux-364/arch/ppc64/kernel/head.S
--- linux-363/arch/ppc64/kernel/head.S
+++ linux-364/arch/ppc64/kernel/head.S
@@ -1201,20 +1201,10 @@ _GLOBAL(do_slb_bolted)
 	mulld   r20,r20,r21
 	clrldi  r20,r20,28      /* r20 = vsid */
 
-	/* Search the SLB for a free entry */
-	li      r22,1
-1:
-	slbmfee	r23,r22
-	rldicl  r23,r23,37,63
-	cmpwi   r23,0
-	beq     4f              /* Found an invalid entry              */
-
-	addi	r22,r22,1
-	cmpldi	r22,64
-	blt	1b
-
-	/* No free entry - just take the next entry, round-robin */
-	/* XXX we should get the number of SLB entries from the naca */
+	/* 
+	 * Don't look for a free entry - just take the next entry, 
+	 * round-robin 
+	 */
 SLB_NUM_ENTRIES = 64
 2:	mfspr	r21,SPRG3
 	ld	r22,PACASTABRR(r21)
@@ -1226,27 +1216,38 @@ SLB_NUM_ENTRIES = 64
 
 	/* r20 = vsid, r22 = entry */
 
+	/* Check to see if old entry is invalid. If so, no need to slbie */
+	slbmfee	r21,r22
+	rldicl  r23,r21,37,63
+	cmpwi   r23,0
+	beq     4f
+
 	/*
 	 * Never cast out the segment for our kernel stack. Since we
 	 * dont invalidate the ERAT we could have a valid translation
 	 * for the kernel stack during the first part of exception exit
 	 * which gets invalidated due to a tlbie from another cpu at a
 	 * non recoverable point (after setting srr0/1) - Anton
-	 */
-	slbmfee	r23,r22
-	srdi	r23,r23,28
-	/*
+	 *
 	 * This is incorrect (r1 is not the kernel stack) if we entered
 	 * from userspace but there is no critical window from userspace
 	 * so this should be OK. Also if we cast out the userspace stack
 	 * segment while in userspace we will fault it straight back in.
 	 */
-	srdi	r21,r1,28
-	cmpd	r21,r23
+	xor	r23,r1,r21
+	srdi	r23,r23,28
+	cmpdi	r23,0
 	beq-	2b
 	
-4:
-	/* Put together the vsid portion of the entry. */
+	/* Invalidate the old entry */
+	slbmfee r21,r22
+	lis	r23,-2049
+	ori	r23,r23,65535
+	and	r21,r21,r23
+	slbie	r21
+	slbie	r21	/* Power5 DD2.0 errata */
+
+4:	/* Put together the vsid portion of the entry */
 	li      r21,0
 	rldimi  r21,r20,12,0
 	ori     r20,r21,1024
@@ -1254,13 +1255,6 @@ SLB_NUM_ENTRIES = 64
 	ori	r20,r20,256    /* map kernel region with large ptes */
 #endif
 	
-	/* Invalidate the old entry */
-	slbmfee	r21,r22
-	lis	r23,-2049
-	ori	r23,r23,65535
-	and	r21,r21,r23
-	slbie	r21
-
 	/* Put together the esid portion of the entry. */
 	mfspr	r21,DAR        /* Get the new esid                     */
 	rldicl  r21,r21,36,28  /* Permits a full 36b of ESID           */
