diff -urNp linux-2050/include/net/scm.h linux-2060/include/net/scm.h
--- linux-2050/include/net/scm.h
+++ linux-2060/include/net/scm.h
@@ -36,7 +36,7 @@ static __inline__ int scm_send(struct so
 	memset(scm, 0, sizeof(*scm));
 	scm->creds.uid = current->uid;
 	scm->creds.gid = current->gid;
-	scm->creds.pid = current->pid;
+	scm->creds.pid = current->tgid;
 	if (msg->msg_controllen <= 0)
 		return 0;
 	return __scm_send(sock, msg, scm);
diff -urNp linux-2050/net/core/sock.c linux-2060/net/core/sock.c
--- linux-2050/net/core/sock.c
+++ linux-2060/net/core/sock.c
@@ -1054,7 +1054,7 @@ int sock_no_fcntl(struct socket *sock, u
 			 * another process.
 			 */
 			if (current->pgrp != -arg &&
-				current->pid != arg &&
+				current->tgid != arg &&
 				!capable(CAP_KILL)) return(-EPERM);
 			sk->proc = arg;
 			return(0);
diff -urNp linux-2050/net/econet/af_econet.c linux-2060/net/econet/af_econet.c
--- linux-2050/net/econet/af_econet.c
+++ linux-2060/net/econet/af_econet.c
@@ -647,7 +647,7 @@ static int econet_ioctl(struct socket *s
 		case SIOCSPGRP:
 			if (get_user(pid, (int *) arg))
 				return -EFAULT; 
-			if (current->pid != pid && current->pgrp != -pid && !capable(CAP_NET_ADMIN))
+			if (current->tgid != pid && current->pgrp != -pid && !capable(CAP_NET_ADMIN))
 				return -EPERM;
 			sk->proc = pid;
 			return(0);
diff -urNp linux-2050/net/ipv4/af_inet.c linux-2060/net/ipv4/af_inet.c
--- linux-2050/net/ipv4/af_inet.c
+++ linux-2060/net/ipv4/af_inet.c
@@ -886,7 +886,7 @@ static int inet_ioctl(struct socket *soc
 			err = get_user(pid, (int *) arg);
 			if (err)
 				return err; 
-			if (current->pid != pid && current->pgrp != -pid && 
+			if (current->tgid != pid && current->pgrp != -pid &&
 			    !capable(CAP_NET_ADMIN))
 				return -EPERM;
 			sk->proc = pid;
diff -urNp linux-2050/net/ipv6/af_inet6.c linux-2060/net/ipv6/af_inet6.c
--- linux-2050/net/ipv6/af_inet6.c
+++ linux-2060/net/ipv6/af_inet6.c
@@ -429,7 +429,7 @@ static int inet6_ioctl(struct socket *so
 		if (get_user(pid, (int *) arg))
 			return -EFAULT;
 		/* see sock_no_fcntl */
-		if (current->pid != pid && current->pgrp != -pid && 
+		if (current->tgid != pid && current->pgrp != -pid &&
 		    !capable(CAP_NET_ADMIN))
 			return -EPERM;
 		sk->proc = pid;
diff -urNp linux-2050/net/packet/af_packet.c linux-2060/net/packet/af_packet.c
--- linux-2050/net/packet/af_packet.c
+++ linux-2060/net/packet/af_packet.c
@@ -1450,7 +1450,7 @@ static int packet_ioctl(struct socket *s
 			int pid;
 			if (get_user(pid, (int *) arg))
 				return -EFAULT; 
-			if (current->pid != pid && current->pgrp != -pid && 
+			if (current->tgid != pid && current->pgrp != -pid &&
 			    !capable(CAP_NET_ADMIN))
 				return -EPERM;
 			sk->proc = pid;
diff -urNp linux-2050/net/unix/af_unix.c linux-2060/net/unix/af_unix.c
--- linux-2050/net/unix/af_unix.c
+++ linux-2060/net/unix/af_unix.c
@@ -445,7 +445,7 @@ static int unix_listen(struct socket *so
 	sk->max_ack_backlog=backlog;
 	sk->state=TCP_LISTEN;
 	/* set credentials so connect can copy them */
-	sk->peercred.pid = current->pid;
+	sk->peercred.pid = current->tgid;
 	sk->peercred.uid = current->euid;
 	sk->peercred.gid = current->egid;
 	err = 0;
@@ -970,7 +970,7 @@ restart:
 	unix_peer(newsk)=sk;
 	newsk->state=TCP_ESTABLISHED;
 	newsk->type=SOCK_STREAM;
-	newsk->peercred.pid = current->pid;
+	newsk->peercred.pid = current->tgid;
 	newsk->peercred.uid = current->euid;
 	newsk->peercred.gid = current->egid;
 	newsk->sleep = &newsk->protinfo.af_unix.peer_wait;
@@ -1031,7 +1031,7 @@ static int unix_socketpair(struct socket
 	sock_hold(skb);
 	unix_peer(ska)=skb;
 	unix_peer(skb)=ska;
-	ska->peercred.pid = skb->peercred.pid = current->pid;
+	ska->peercred.pid = skb->peercred.pid = current->tgid;
 	ska->peercred.uid = skb->peercred.uid = current->euid;
 	ska->peercred.gid = skb->peercred.gid = current->egid;
 
diff -urNp linux-2050/net/wanrouter/af_wanpipe.c linux-2060/net/wanrouter/af_wanpipe.c
--- linux-2050/net/wanrouter/af_wanpipe.c
+++ linux-2060/net/wanrouter/af_wanpipe.c
@@ -1866,7 +1866,7 @@ static int wanpipe_ioctl(struct socket *
 			err = get_user(pid, (int *) arg);
 			if (err)
 				return err; 
-			if (current->pid != pid && current->pgrp != -pid && 
+			if (current->tgid != pid && current->pgrp != -pid &&
 			    !capable(CAP_NET_ADMIN))
 				return -EPERM;
 			sk->proc = pid;
